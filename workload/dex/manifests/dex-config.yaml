#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")
#@ load("@ytt:struct", "struct")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:library", "library")

#@ foundation = "dev"

#@ secretConfig = library.get(foundation).eval()[0]
#@ 
#@ config = overlay.apply(data.values, secretConfig)
#@ config = struct.encode(yaml.decode(yaml.encode(config)))


#@ def dex_config():
issuer: #@ "https://login.sso.{}".format(config.domain)
frontend:
  theme: tkg
web:
  http: 0.0.0.0:5556
expiry:
  signingKeys: "10m"
  idTokens: "5m"
logger:
  level: "debug"
  format: "json"
oauth2:
  skipApprovalScreen: true
storage:
  type: kubernetes
  config:
    inCluster: true
connectors:
- type: github
  id: github
  name: GitHub
  config:
    clientID: #@ config.github_client_id
    clientSecret: #@ config.github_client_secret
    redirectURI: #@ "https://login.sso.{}/callback".format(config.domain)
    orgs: 
    - name: #@ config.github_org
    - name: #@ "{}-Teams".format(config.github_org)
      teams:
      - #@ config.github_team
- type: saml
  id: saml
  name: SAML
  config:
    ssoURL: #@ config.saml_url
    caData: #@ config.saml_caData
    usernameAttr: name
    emailAttr: email
    groupsAttr: groups
    redirectURI: #@ "https://login.sso.{}/callback".format(config.domain)
staticClients:
- id: #@ config.sonarqube_client_id
  secret: #@ config.sonarqube_client_secret
  name: 'SonarQube'
  redirectURIs:
  - #@ "https://sonar.apps.{}/oauth2/callback".format(config.domain)
- id: (@= config.kuard_client_id @)
  secret: #@ config.kuard_client_secret
  name: 'Kuard'
  redirectURIs:
  - #@ "https://kuard.apps.{}/oauth2/callback".format(config.domain)
- id: (@= config.grafana_client_id @)
  secret: #@ config.grafana_client_secret
  name: 'Grafana'
  redirectURIs:
  - #@ "https://grafana.monitoring.{}/login/generic_oauth".format(config.domain)
#@ end

---
apiVersion: v1
kind: Namespace
metadata:
  name: sso
---
apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: dex
  namespace: sso
spec:
  virtualhost:
    fqdn: #@ "login.sso.{}".format(config.domain)
    tls:
      secretName: #@ "sso/sso.{}".format(config.domain)
  routes:
    - services:
        - name: dex
          port: 32000

---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/name: dex
    helm.sh/chart: dex-2.10.0
    app.kubernetes.io/instance: dex
    app.kubernetes.io/version: 2.23.0
    app.kubernetes.io/managed-by: Helm
  annotations:
    kapp.k14s.io/versioned: ""
    kapp.k14s.io/num-versions: "4"
  name: dex
  namespace: sso
stringData:
  config.yaml: #@ yaml.encode(dex_config())